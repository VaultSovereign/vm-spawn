#!/usr/bin/env bash
# remembrancer - VaultMesh Covenant Memory CLI Tool
# Purpose: Record deployments, query decisions, generate cryptographic receipts

set -euo pipefail

# Configuration
WORKSPACE_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.." && pwd)"
MEMORY_INDEX="$WORKSPACE_ROOT/docs/REMEMBRANCER.md"
RECEIPTS_DIR="$WORKSPACE_ROOT/ops/receipts"
TIMESTAMP="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Display usage
usage() {
  cat <<EOF
${CYAN}üß† The Remembrancer${NC} - VaultMesh Covenant Memory CLI

${YELLOW}USAGE:${NC}
  remembrancer <command> [options]

${YELLOW}COMMANDS:${NC}
  ${GREEN}record${NC}        Record a new memory (deployment, ADR, incident)
  ${GREEN}query${NC}         Query historical decisions and context
  ${GREEN}list${NC}          List memories by type
  ${GREEN}receipt${NC}       Generate cryptographic receipt for a memory
  ${GREEN}verify${NC}        Verify artifact integrity (SHA256)
  ${GREEN}timeline${NC}      Show chronological memory timeline
  ${GREEN}adr${NC}           Architectural Decision Record operations

${YELLOW}EXAMPLES:${NC}
  # Record a deployment
  remembrancer record deploy \\
    --component spawn-elite \\
    --version v2.2 \\
    --sha256 44e8ecd... \\
    --evidence V2.2_PRODUCTION_SUMMARY.md

  # Query a decision
  remembrancer query "why bash scripts?"

  # List all deployments
  remembrancer list deployments

  # Generate receipt
  remembrancer receipt deploy/spawn-elite/v2.2

  # Verify artifact
  remembrancer verify vaultmesh-spawn-elite-v2.2-PRODUCTION.tar.gz

  # Show timeline
  remembrancer timeline --since 2025-10-01

  # Create ADR
  remembrancer adr create "Use PostgreSQL for persistent storage"

${YELLOW}OPTIONS:${NC}
  -h, --help       Show this help message
  -v, --version    Show version

${PURPLE}The Remembrancer ensures that knowledge compounds, not entropy.${NC}
EOF
}

# Initialize receipts directory structure
init_receipts() {
  mkdir -p "$RECEIPTS_DIR"/{deploy,adr,incident,discovery}
}

# Record a deployment
record_deploy() {
  local component="$1"
  local version="$2"
  local sha256="$3"
  local evidence="$4"

  local receipt_file="$RECEIPTS_DIR/deploy/${component}-${version}.receipt"
  
  cat > "$receipt_file" <<EOF
---
type: deployment
component: $component
version: $version
timestamp: $TIMESTAMP
evidence:
  artifact: $evidence
  sha256: $sha256
status: active
verified_by: remembrancer-cli
---

This receipt cryptographically attests to the deployment of:

  Component: $component
  Version: $version
  Timestamp: $TIMESTAMP
  SHA256: $sha256

Verification:
  shasum -a 256 $evidence

This memory is recorded in the VaultMesh Covenant Index.
EOF

  echo -e "${GREEN}‚úÖ Deployment recorded${NC}"
  echo -e "   Receipt: ${CYAN}$receipt_file${NC}"
  echo -e "   SHA256: ${YELLOW}$sha256${NC}"
}

# Query memory index
query_memory() {
  local query="$1"
  
  if [[ ! -f "$MEMORY_INDEX" ]]; then
    echo -e "${RED}‚ùå Memory index not found: $MEMORY_INDEX${NC}"
    exit 1
  fi

  echo -e "${CYAN}üîç Searching memory for: \"$query\"${NC}"
  echo ""
  
  # Simple grep-based search (can be enhanced with semantic search)
  grep -i -C 5 "$query" "$MEMORY_INDEX" || {
    echo -e "${YELLOW}‚ö†Ô∏è  No memories found matching \"$query\"${NC}"
    exit 0
  }
}

# List memories by type
list_memories() {
  local type="${1:-all}"
  
  if [[ ! -f "$MEMORY_INDEX" ]]; then
    echo -e "${RED}‚ùå Memory index not found: $MEMORY_INDEX${NC}"
    exit 1
  fi

  echo -e "${CYAN}üìã Listing memories: $type${NC}"
  echo ""

  case "$type" in
    deployments)
      grep -E "^###.*‚Äî.*Released$" "$MEMORY_INDEX" || echo "No deployments found"
      ;;
    adrs|decisions)
      grep -E "^\*\*ADR-[0-9]+:" "$MEMORY_INDEX" || echo "No ADRs found"
      ;;
    all)
      grep -E "^(###|##) " "$MEMORY_INDEX"
      ;;
    *)
      echo -e "${RED}‚ùå Unknown type: $type${NC}"
      echo "   Valid types: deployments, adrs, decisions, all"
      exit 1
      ;;
  esac
}

# Generate cryptographic receipt
generate_receipt() {
  local memory_path="$1"
  local receipt_file="$RECEIPTS_DIR/${memory_path}.receipt"

  if [[ -f "$receipt_file" ]]; then
    echo -e "${GREEN}üìú Receipt found${NC}"
    cat "$receipt_file"
  else
    echo -e "${YELLOW}‚ö†Ô∏è  Receipt not found: $receipt_file${NC}"
    echo "   Available receipts:"
    find "$RECEIPTS_DIR" -name "*.receipt" -type f | sed 's|^|   - |'
  fi
}

# Verify artifact integrity
verify_artifact() {
  local artifact="$1"
  
  if [[ ! -f "$artifact" ]]; then
    echo -e "${RED}‚ùå Artifact not found: $artifact${NC}"
    exit 1
  fi

  echo -e "${CYAN}üîê Verifying artifact integrity...${NC}"
  
  # Compute SHA256
  if command -v sha256sum &> /dev/null; then
    local computed_hash=$(sha256sum "$artifact" | awk '{print $1}')
  elif command -v shasum &> /dev/null; then
    local computed_hash=$(shasum -a 256 "$artifact" | awk '{print $1}')
  else
    echo -e "${RED}‚ùå No SHA256 tool available (sha256sum or shasum)${NC}"
    exit 1
  fi

  echo -e "${GREEN}‚úÖ SHA256 computed${NC}"
  echo -e "   File: ${CYAN}$artifact${NC}"
  echo -e "   Hash: ${YELLOW}$computed_hash${NC}"
  echo ""
  echo "To verify against recorded memory, check:"
  echo "  grep -i \"$computed_hash\" $MEMORY_INDEX"
}

# Show timeline
show_timeline() {
  local since="${1:-}"
  
  if [[ ! -f "$MEMORY_INDEX" ]]; then
    echo -e "${RED}‚ùå Memory index not found: $MEMORY_INDEX${NC}"
    exit 1
  fi

  echo -e "${CYAN}üìÖ Memory Timeline${NC}"
  echo ""

  if [[ -n "$since" ]]; then
    echo "Showing entries since: $since"
    echo ""
    # Filter by date (simple approach)
    grep -E "^### [0-9]{4}-[0-9]{2}-[0-9]{2}" "$MEMORY_INDEX" | while read -r line; do
      local entry_date=$(echo "$line" | grep -oE "[0-9]{4}-[0-9]{2}-[0-9]{2}")
      if [[ "$entry_date" > "$since" ]] || [[ "$entry_date" == "$since" ]]; then
        echo "$line"
      fi
    done
  else
    grep -E "^### [0-9]{4}-[0-9]{2}-[0-9]{2}" "$MEMORY_INDEX"
  fi
}

# Create ADR
create_adr() {
  local title="$1"
  local adr_num=$(grep -cE "^\*\*ADR-[0-9]+:" "$MEMORY_INDEX" 2>/dev/null || echo 0)
  ((adr_num++))
  
  local adr_id=$(printf "ADR-%03d" $adr_num)
  
  echo -e "${CYAN}üìù Creating $adr_id: $title${NC}"
  echo ""
  echo "Template (add to REMEMBRANCER.md):"
  echo ""
  cat <<EOF
**$adr_id: $title**
- **Decision:** [State the decision]
- **Rationale:** [Explain why this decision was made]
- **Trade-offs:** [What are the costs/benefits?]
- **Status:** Proposed
- **Date:** $TIMESTAMP
EOF
  echo ""
  echo -e "${YELLOW}‚ö†Ô∏è  Manual step: Add the above to $MEMORY_INDEX${NC}"
}

# Main command dispatcher
main() {
  if [[ $# -eq 0 ]]; then
    usage
    exit 0
  fi

  local command="$1"
  shift

  case "$command" in
    record)
      local subcommand="${1:-}"
      shift || true
      case "$subcommand" in
        deploy)
          if [[ $# -lt 4 ]]; then
            echo "Usage: remembrancer record deploy --component <name> --version <ver> --sha256 <hash> --evidence <file>"
            exit 1
          fi
          # Parse flags (simplified)
          local component="" version="" sha256="" evidence=""
          while [[ $# -gt 0 ]]; do
            case "$1" in
              --component) component="$2"; shift 2;;
              --version) version="$2"; shift 2;;
              --sha256) sha256="$2"; shift 2;;
              --evidence) evidence="$2"; shift 2;;
              *) shift;;
            esac
          done
          init_receipts
          record_deploy "$component" "$version" "$sha256" "$evidence"
          ;;
        *)
          echo "Usage: remembrancer record [deploy]"
          exit 1
          ;;
      esac
      ;;
    query)
      query_memory "$*"
      ;;
    list)
      list_memories "${1:-all}"
      ;;
    receipt)
      generate_receipt "${1:-}"
      ;;
    verify)
      verify_artifact "${1:-}"
      ;;
    timeline)
      local since=""
      if [[ "${1:-}" == "--since" ]]; then
        since="${2:-}"
      fi
      show_timeline "$since"
      ;;
    adr)
      local subcommand="${1:-}"
      shift || true
      case "$subcommand" in
        create)
          create_adr "$*"
          ;;
        *)
          echo "Usage: remembrancer adr [create]"
          exit 1
          ;;
      esac
      ;;
    -h|--help)
      usage
      ;;
    -v|--version)
      echo "remembrancer v1.0.0 (VaultMesh Covenant Memory)"
      ;;
    *)
      echo -e "${RED}‚ùå Unknown command: $command${NC}"
      echo ""
      usage
      exit 1
      ;;
  esac
}

main "$@"

