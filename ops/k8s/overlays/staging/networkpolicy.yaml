apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny
spec:
  podSelector: {}
  policyTypes: ["Ingress","Egress"]
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-bridge
spec:
  podSelector: { matchLabels: { app: aurora-bridge } }
  policyTypes: ["Ingress","Egress"]
  ingress:
    - {}  # allow within cluster for staging
  egress:
    - to: [{ podSelector: { matchLabels: { app: aurora-redis } } }]
      ports: [{ protocol: TCP, port: 6379 }]
    - {}  # allow egress for pip/TSA in staging; tighten in prod
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-redis
spec:
  podSelector: { matchLabels: { app: aurora-redis } }
  policyTypes: ["Ingress"]
  ingress:
    - from: [{ podSelector: { matchLabels: { app: aurora-bridge } } }]
      ports: [{ protocol: TCP, port: 6379 }]
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-prometheus-scrape
spec:
  podSelector: { matchLabels: { app: aurora-metrics-exporter } }
  policyTypes: ["Ingress"]
  ingress:
    - from:
        - namespaceSelector: { matchLabels: { name: monitoring } }
        - podSelector: { matchLabels: { app: prometheus } }
      ports: [{ protocol: TCP, port: 9109 }]
